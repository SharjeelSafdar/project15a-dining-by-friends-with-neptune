type Person {
  id: ID!
  firstName: String
  lastName: String
  username: String!
  email: AWSEmail!
}

input NewPerson {
  username: String!
  email: AWSEmail!
  firstName: String
  lastName: String
  cityId: ID!
}

type City {
  id: ID!
  name: String!
}

type State {
  id: ID!
  name: String!
}

type Cuisine {
  id: ID!
  name: String!
}

type Restaurant {
  id: ID!
  name: String!
  address: String!
}

input NewRestaurant {
  name: String!
  address: String!
  cityId: ID!
  cuisineId: ID!
}

type Review {
  id: ID!
  createdAt: AWSDateTime!
  rating: Int!
  body: String
}

input NewReview {
  rating: Int!
  body: String
  personId: ID!
  restaurantId: ID!
}

type ReviewRating {
  id: ID!
  thumbsUp: Boolean!
  reviewDate: AWSDateTime!
}

input NewReviewRating {
  thumbsUp: Boolean!
  personId: ID!
  reviewId: ID!
}

type Query {
  getPerson(id: ID!): Person
  getFriends(personId: ID!): [Person!]
  getFriendsOfFriends(personId: ID!): [Person!]
  findPathBetweenPeople(person1Id: ID!, person2Id: ID!): String
  highestRatedRestaurantByCuisine(personId: ID!, cuisineIds: [ID!]!): Restaurant
  highestRatedRestaurants(personId: ID!): [Restaurant]!
  newestRestaurantReviews(restaurantId: ID!): [Review]!
  restaurantsByFriendsRecommendation(personId: ID!): [Restaurant]!
  restaurantsByFriendsReviewRatingss(personId: ID!): [Restaurant]!
  restaurantsRatedOrReviewedByFriendsinXDays(
    personId: ID!
    numDays: Int! = 10
  ): [Restaurant]!
}

type Mutation {
  addPerson(newPerson: NewPerson!): Person
  addUpdateFirstName(personId: ID!, firstName: String!): String
  addUpdateLastName(personId: ID!, lastName: String!): String
  deletePerson(id: ID!): String
  addCity(name: String!, stateId: ID!): City
  updateCityName(id: ID!, newName: String!): City
  deleteCity(id: ID!): String
  addState(name: String!): State
  updateStateName(id: ID!, newName: String!): State
  deleteState(id: ID!): String
  addCuisine(name: String!): Cuisine
  updateCuisineName(id: ID!, newName: String!): Cuisine
  deleteCuisine(id: ID!): String
  addRestaurant(newRestaurant: NewRestaurant!): Restaurant
  updateRestaurantName(id: ID!, newName: String!): Restaurant
  updateRestaurantAddress(id: ID!, newAddress: String!): Restaurant
  deleteRestaurant(id: ID): String
  addReview(newReview: NewReview!): Review
  addReviewRating(newReviewRating: NewReviewRating!): ReviewRating
  addFriendsEdge(fromId: ID!, toId: ID!): String
}

type schema {
  query: Query
  mutation: Mutation
}
