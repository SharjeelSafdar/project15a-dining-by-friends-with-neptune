type Person {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  email: String!
}

input NewPerson {
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  cityId: ID!
}

type City {
  id: ID!
  name: String!
}

type State {
  id: ID!
  name: String!
}

type Cuisine {
  id: ID!
  name: String!
}

type Restaurant {
  id: ID!
  name: String!
  address: String!
}

input NewRestaurant {
  name: String!
  address: String!
  cityId: ID!
  cuisineId: ID!
}

type Review {
  id: ID!
  createdAt: Int!
  rating: Int!
  body: String
}

input NewReview {
  rating: Int!
  body: String
  personId: ID!
  restaurantId: ID!
}

type ReviewRating {
  id: ID!
  thumbsUp: Boolean!
  reviewDate: Int!
}

input NewReviewRating {
  thumbsUp: Boolean!
  personId: ID!
  reviewId: ID!
}

type EventBridgeReponse {
  result: String!
}

type Query {
  getPerson(id: ID!): Person
  getFriends(personId: ID!): [Person!]
  getFriendsOfFriends(personId: ID!): [Person!]
  findPathBetweenPeople(person1Id: ID!, person2Id: ID!): String
  highestRatedRestaurantByCuisine(personId: ID!, cuisineIds: [ID!]!): Restaurant
  highestRatedRestaurants(personId: ID!): [Restaurant!]
  newestRestaurantReviews(restaurantId: ID!): [Review!]
  restaurantsByFriendsRecommendation(personId: ID!): [Restaurant!]
  restaurantsByFriendsReviewRatingss(personId: ID!): [Restaurant!]
  restaurantsRatedOrReviewedByFriendsinXDays(
    personId: ID!
    numDays: Int! = 10
  ): [Restaurant!]
}

type Mutation {
  addPerson(newPerson: NewPerson!): EventBridgeReponse
  addUpdateFirstName(personId: ID!, firstName: String!): EventBridgeReponse
  addUpdateLastName(personId: ID!, lastName: String!): EventBridgeReponse
  deletePerson(personId: ID!): EventBridgeReponse
  addCity(name: String!, stateId: ID!): EventBridgeReponse
  updateCityName(cityId: ID!, newName: String!): EventBridgeReponse
  deleteCity(cityId: ID!): EventBridgeReponse
  addState(name: String!): EventBridgeReponse
  updateStateName(stateId: ID!, newName: String!): EventBridgeReponse
  deleteState(stateId: ID!): EventBridgeReponse
  addCuisine(name: String!): EventBridgeReponse
  updateCuisineName(cuisineId: ID!, newName: String!): EventBridgeReponse
  deleteCuisine(cuisineId: ID!): EventBridgeReponse
  addRestaurant(newRestaurant: NewRestaurant!): EventBridgeReponse
  updateRestaurantName(restaurantId: ID!, newName: String!): EventBridgeReponse
  updateRestaurantAddress(
    restaurantId: ID!
    newAddress: String!
  ): EventBridgeReponse
  deleteRestaurant(restaurantId: ID): EventBridgeReponse
  addReview(newReview: NewReview!): EventBridgeReponse
  deleteReview(reviewId: ID!): EventBridgeReponse
  addReviewRating(newReviewRating: NewReviewRating!): EventBridgeReponse
  deleteReviewRating(reviewRatingId: ID!): EventBridgeReponse
  addFriendsEdge(fromId: ID!, toId: ID!): EventBridgeReponse
  deleteFriendsEdge(friendsEdgeId: ID!): EventBridgeReponse
}

type schema {
  query: Query
  mutation: Mutation
}
